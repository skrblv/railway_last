# backend/settings.py

"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os  # Import os module for environment variables

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- SECURITY SETTINGS ---

# SECURITY WARNING: keep the secret key used in production secret!
# It's highly recommended to load this from an environment variable in production.
# Set the DJANGO_SECRET_KEY environment variable in your Railway service settings.
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY',
    'django-insecure-0hqqy#)-qvcs1w!$d04o=494@z$gssu0($ow%3c0+g!%q4^k$@' # Default for local dev ONLY
)

# SECURITY WARNING: don't run with debug turned on in production!
# Set DJANGO_DEBUG=False environment variable in Railway for production.
# Defaults to True if the environment variable is not set or not 'False'.
DEBUG = os.environ.get('DJANGO_DEBUG', '') != 'False'

ALLOWED_HOSTS = [
    # Add your Railway app's domain name here (e.g., 'your-app-name.up.railway.app')
    "railwaylast-production.up.railway.app",
    # Add localhost for local development
    "localhost",
    "127.0.0.1",
    "https://railwaylast-production.up.railway.app/admin/login/?next=/admin/",
    # Railway might inject its domain via an env var, you could use that too:
    # os.environ.get('RAILWAY_PUBLIC_DOMAIN', 'localhost') # Example if Railway provides it
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # --- Whitenoise ---
    # Add 'whitenoise.runserver_nostatic' *before* 'django.contrib.staticfiles'
    # This makes the development server behave more like production for static files.
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    # --- Third-party apps ---
    'rest_framework',
    'corsheaders',
    # --- Your apps ---
    'api', # Your API app (or rename as needed)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # --- Whitenoise Middleware ---
    # Place Whitenoise middleware *right after* SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # --- CORS Middleware ---
    # Place CorsMiddleware fairly high, but after security/whitenoise
    'corsheaders.middleware.CorsMiddleware',
    # --- Standard Django Middleware ---
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls' # Points to your main urls.py file

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Tell Django where to find your HTML templates (index.html)
        'DIRS': [BASE_DIR / "frontend"],
        'APP_DIRS': True, # Allows Django to find templates inside installed apps
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Add 'static' context processor if you use {% static %} template tag
                'django.template.context_processors.static',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application' # Points to your wsgi.py file

# --- Database ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# Default SQLite setup.
# For Railway production, you'll likely want to configure PostgreSQL
# using environment variables for credentials provided by Railway.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
    # Example PostgreSQL configuration using environment variables (adapt as needed):
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': os.environ.get('PGDATABASE'),
    #     'USER': os.environ.get('PGUSER'),
    #     'PASSWORD': os.environ.get('PGPASSWORD'),
    #     'HOST': os.environ.get('PGHOST'),
    #     'PORT': os.environ.get('PGPORT', '5432'), # Default port if not set
    # }
}


# --- Password validation ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# --- Internationalization ---
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True # Recommended to keep True for time zone handling


# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/5.1/howto/static-files/
# https://whitenoise.readthedocs.io/

# URL to use when referring to static files located in STATIC_ROOT.
# Example: {% static 'css/style.css' %} -> '/static/css/style.css'
STATIC_URL = '/static/'

# Directories where Django will look for static files *in addition* to each app's 'static/' directory.
# Put your global static files (like base CSS, JS, images used in templates) here.
# Your 'style.css', 'script.js', and 'assets' folder should be directly inside 'frontend'.
STATICFILES_DIRS = [
    BASE_DIR / 'frontend',
]

# The absolute path to the directory where `collectstatic` will collect static files for deployment.
# **DO NOT** put anything in this directory yourself; Django/Whitenoise manage it.
# Whitenoise serves files from this directory in production.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# --- Whitenoise Storage Backend (Recommended) ---
# Use Whitenoise's storage backend for compression and efficient caching (via Manifest).
# This replaces the older STATICFILES_STORAGE setting in Django 4.2+.
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
# If using Django < 4.2, use this instead of STORAGES:
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# --- Media Files (User Uploads) ---
# These settings are for files uploaded by users through your application.
# Since your 'assets' seem to be part of the site design (images, audio),
# they should be treated as STATIC files (handled above).
# If you *do* have user uploads, you'll typically configure cloud storage (like S3)
# for production instead of serving them directly from the filesystem.
# MEDIA_URL = '/media/' # URL prefix for media files
# MEDIA_ROOT = BASE_DIR / 'mediafiles' # Directory to store uploaded files *locally* (not recommended for production)


# --- CORS (Cross-Origin Resource Sharing) Settings ---
# https://github.com/adamchainz/django-cors-headers

# Option 1: Allow all origins (simple for development, less secure for production)
# CORS_ALLOW_ALL_ORIGINS = True

# Option 2: Specify allowed origins (Recommended for production)
CORS_ALLOW_ALL_ORIGINS = False # Set to False when using CORS_ALLOWED_ORIGINS
CORS_ALLOWED_ORIGINS = [
    "https://railwaylast-production.up.railway.app", # Your frontend production domain
    "http://localhost:8000",   # Django dev server
    "http://127.0.0.1:8000",  # Django dev server
    "http://localhost:5500",   # VS Code Live Server (if used)
    "http://127.0.0.1:5500",  # VS Code Live Server (if used)
    # Add any other frontend origins you need to allow
    # "null" # Sometimes needed for specific local setups or file:// origins
]

# Optional: If you use Credentials (like cookies or auth headers) with CORS requests
# CORS_ALLOW_CREDENTIALS = True

# Optional: CSRF Protection Trusted Origins (May be needed for POST requests from different subdomains/ports)
# Especially important if your frontend and backend are on different domains/subdomains in prod.
# CSRF_TRUSTED_ORIGINS = [
#     "https://railwaylast-production.up.railway.app",
#     "http://localhost:5500",
#     "http://127.0.0.1:5500",
# ]


# --- Default primary key field type ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
